{# Build template macros #}
{% import "misc.j2" as misc_macros %}

{% macro summary(build) %}
    {{- [build.architecture, build.config_name,
         none if build.comment is none else ('"' + build.comment + '"')] |
        reject("none") | join(" ") | default(build.id, true) -}}
{% endmacro %}

{% macro container_summary(container, max_list_len) %}
    {% if container.builds %}
        {{- "\nBUILDS" }}
        {% set row_fmt =
            "%" + (
                8 +
                container.architecture_status_builds.keys() |
                map("default", "?", true) | map("length") | max
            ) | string + "s" +
            misc_macros.emoji_count_row_fmt(
                container.status_builds.values() | map("length")
            ) +
            "\n" %}

        {{- "\n    Status" }}
        {% set row = namespace(args=("",)) %}
        {% for status, builds in container.status_builds.items() %}
            {% set row.args = row.args + (
                misc_macros.status_emoji(status) if builds else "➖",
                builds | length | string
            ) %}
        {% endfor %}
        {{- row_fmt % row.args -}}

        {{- "    Architectures" }}
        {% for architecture, status_builds in
            container.architecture_status_builds.items() %}
            {% set row = namespace(args=(
                    "?" if architecture is none else architecture,
                )) %}
            {% for status, builds in status_builds.items() %}
                {% set row.args = row.args + (
                    misc_macros.status_emoji(status) if builds else "➖",
                    builds | length | string
                ) %}
            {% endfor %}
            {{- row_fmt % row.args -}}
        {% endfor %}

        {%- set failed_builds = container.status_builds["FAIL"] -%}
        {% if failed_builds %}
            {{- "    Failures" }}
            {% set ns = namespace(build_summary_counts={}) %}
            {% for build in failed_builds %}
                {% set build_summary = summary(build) %}
                {% set _ = ns.build_summary_counts.__setitem__(
                                build_summary,
                                ns.build_summary_counts.get(build_summary, 0) + 1
                           ) %}
            {% endfor %}
            {% set build_summary_counts_items = ns.build_summary_counts |
                        dictsort(by='value', reverse=true) | list %}
            {% for build_summary, count in build_summary_counts_items[:max_list_len] %}
                {{- "        ❌ " + (count | string) + "  " + build_summary }}
            {% endfor %}
            {% if (build_summary_counts_items | length) > max_list_len %}
                {{- "        ..." }}
            {% endif %}
        {%- endif -%}

        {{- "    By\n        " -}}
            {{- container.builds | map(attribute="origin") |
                unique | sort | join(", ") }}
    {% endif %}
{% endmacro %}
