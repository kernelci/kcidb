{# Test macros #}
{% from "common.j2" import indent, stats_indent, selected_origins_for_fluster %}

{% set test_names_titles = {
        "gstreamer_av1":           "av1",
        "gstreamer_av1_chromium":  "av1-chromium-10bit",
        "gstreamer_h264":          "h264",
        "gstreamer_h264_frext":    "h264-frext",
        "gstreamer_h265":          "h265",
        "gstreamer_vp8":           "vp8",
        "gstreamer_vp9":           "vp9"
    } %}

{% macro get_tests_summary(container, file_system) %}
    {% set boards_titles_statuses_counts = {} %}
    {% for test in container.tests %}
        {% set board = test.environment_compatible[0] %}
        {% set path_items = test.path.split(".") %}
        {% if test.origin in selected_origins_for_fluster and
              board is defined and
              path_items | length > 4 and
              path_items[0] == "fluster" and
              path_items[1] == file_system and
              path_items[2] == "v4l2" and
              path_items[3] in test_names_titles and
              path_items[4] != "validate-fluster-results" %}
            {% set title = test_names_titles[path_items[3]] %}
            {% set titles_statuses_counts =
                   boards_titles_statuses_counts.get(board, {}) %}
            {% set statuses_counts =
                   titles_statuses_counts.get(title, {}) %}
            {% set count = statuses_counts.get(test.status, 0) + 1 %}
            {% set _ = statuses_counts.update({test.status: count}) %}
            {% set _ = titles_statuses_counts.update({title: statuses_counts}) %}
            {% set _ = boards_titles_statuses_counts.update({board: titles_statuses_counts}) %}
        {% endif %}
    {% endfor %}
    {% if boards_titles_statuses_counts %}
        {{ display_test_summary(boards_titles_statuses_counts, file_system) }}
    {% endif %}
{% endmacro %}

{% macro display_test_summary(boards_titles_statuses_counts, file_system) %}
    {% set ns = namespace(max_test_count=0) %}
    {% for  _, titles_statuses_counts in boards_titles_statuses_counts.items() %}
        {% for _, statuses_counts in titles_statuses_counts.items() %}
            {% set ns.max_test_count = [statuses_counts.values() | sum, ns.max_test_count] | max %}
        {% endfor %}
    {% endfor %}
    {% set field_width = ( ns.max_test_count + 1 ) | string | length | string %}
    {{- "\n" + file_system + ":" -}}
    {% for board, titles_statuses_counts in boards_titles_statuses_counts | dictsort %}
        {{- "\n" + indent + board + ":\n" -}}
        {% for title in test_names_titles.values() | sort %}
            {% set statuses_counts = titles_statuses_counts.get(
                                        title, {"PASS": 0, "FAIL": 0}
                                     ) %}
            {{ indent + " " + title +
                ":" + " " * (stats_indent|length - indent|length - title|length) +
                (
                    "✅{0: >" + field_width + "}" +
                    " ❌{1: >" + field_width + "}" +
                    " Σ{2: >" + field_width + "}"
                ).format(
                    statuses_counts.get("PASS", 0),
                    statuses_counts.get("FAIL", 0),
                    statuses_counts.values() | sum
                )
            }}
        {% endfor %}
    {% endfor %}
{% endmacro %}

{% macro container_summary(container, max_list_len) %}
    {{- "\nFLUSTER TESTS" }}
    {% set fluster_tests_fs = ['debian', 'chromeos'] %}
    {% for fs in fluster_tests_fs %}
        {{ get_tests_summary(container, fs) }}
    {% endfor %}
{% endmacro %}
